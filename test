<!DOCTYPE html>
<html>
<head>
    <title>Battleships</title>
    <style>

   body {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            float: left;
            margin: 50;
        }

        canvas {
            margin-left: 10px;
            background-color: #ccc;
            border: 15px solid rgb(72, 91, 239);
        
            background-image: url("3.avif");
  
        }

        #textDiv {
            margin-top: 20px;
            margin-left: 20px;
            margin-right: 20px;
            border: 2px solid rgb(0, 0, 0);
            background-color: aqua;
            opacity: background-color 50%;
        
        }


    </style>


</head>
<body>
    <div id="container1">
        <canvas id="mySea" width=600 height=600></canvas>
        <div id="myScoreboard">Schips:</div>
    </div>


    <div id="textDiv">
      <button id="changePosition">Positie van je Schip: Horizontal</button>
        <div id="TODO">plaats je eerste schip!</div>       
     
    </div>


    <div id="container 2">
        <canvas id="enemySea" width=600 height=600></canvas>
      </div>

        
  
    
    
<script>

/* enemySquares: array with square objects that don't contain the methods. */
var enemySquares = []
var mySquares = []

var myCanvas = document.getElementById("mySea")
var myContext = myCanvas.getContext("2d")

var enemyCanvas = document.getElementById("enemySea")
var enemyContext = enemyCanvas.getContext("2d")

var gapSize = 3            /* pixels between each square  */
var numRows = 12           /* number of squares that fit in the canvas vertically  */
var numColumns = numRows   /* a sea always has equal length and width  */
var squareSize = getSquareSize()

var shipsInfo = [
{ name: "Destroyer of 2 squares", size: 2},
{ name: "Carrier of 5 squares", size: 5},
{ name: "Battleship of 4 squares", size: 4},
{ name: "Submarine of 3 squares", size: 3},
{ name: "Cruiser of 3 squares ", size: 3},
]


var currentShipIndex = 0
var placingShipsHorizontally = true
  /* this used to be a variable called 'orientation' */

/* onderstaande VAR worden gebruikt voor het displayen van hints/todo's */



function showShipname() {
    if (currentShipIndex < shipsInfo.length){
        var currentShipName = shipsInfo[currentShipIndex].name;
  document.getElementById("TODO").innerHTML = currentShipName;

    } else {
        document.getElementById("TODO").innerHTML = "Gooi nu een bom in de vrijand zijn zee!"
    } 


}


/*
This function calcualates the size of a squares inside of a canvas.
*/
function getSquareSize(){
    var canvasWidth = myCanvas.width
    var optimalSquareSize = (canvasWidth / numRows) - gapSize
    return optimalSquareSize
}

/*
The function creates "square objects" that contain all properties of a given square. Function should only be used for squares of the user's sea.
The "draw" method draws the square on the canvas.
The "isClicked" returns true if the coordinates passed as a parameter overlap the square.
The "getColor" returns the color the square based on state.
*/
function createFriendlyGridSquare(rowNumber, columnNumber){
    var square = {
        rowNr: rowNumber,
        columnNr: columnNumber,
        state: "water",
        getColor: mySeaColors,
        draw: drawSquare,
        changeState: changeSquareStateAndRedraw,
        isClicked: coordinatesOverlap
    }
    return square
}


function createEnemyGridSquare(rowNumber, columnNumber){
    var square = {
        rowNr: rowNumber,
        columnNr: columnNumber,
        state: "water",
        getColor: enemySeaColors,
        draw: drawSquare,
        changeState: changeSquareStateAndRedraw,
        isClicked: coordinatesOverlap
    }
    return square
}

/*
The enemySquares array already has all coordinates in it, but the functions are lacking. This function inserts all methods into an enemy square.
*/
function insertEnemyGameMethods(squareIndex){
    enemySquares[squareIndex].getColor = enemySeaColors
    enemySquares[squareIndex].draw = drawSquare
    enemySquares[squareIndex].changeState = changeSquareStateAndRedraw
    enemySquares[squareIndex].isClicked = coordinatesOverlap
}

/*
Method: draws a square on a canvas context.
*/
function drawSquare(context){
    var x = this.columnNr * (squareSize+gapSize)
    var y = this.rowNr * (squareSize+gapSize)
    context.beginPath()
    context.fillStyle = this.getColor()
    context.rect(x, y, squareSize, squareSize)
    context.fill()
    context.font = "bold 10px sans-serif"
    context.fillStyle = "rgba(255, 255, 255, 0.8)" /* semi-transparent white */
    var squareIndex = this.rowNr*numColumns+this.columnNr 
    context.fillText(squareIndex, x + 5, y + 15)
    /* TIP: you can add fillText commands here to show more info (such as state, 
            or ship name) in each square
    */
}

/*
Method: changes the state of the square and redraws it.
*/
function changeSquareStateAndRedraw(newState,context) {
    this.state = newState
    this.draw(context)
}

/*
Method: returns true if the given coordinates overlap the square.
*/
function coordinatesOverlap(x,y) {
    var squareX = this.columnNr * (squareSize+gapSize)
    var squareY = this.rowNr * (squareSize+gapSize)
    var fitsHorizontally = x >= squareX && x <= squareX + squareSize
    var fitsVertically  = y >= squareY && y <= squareY + squareSize
    return fitsHorizontally && fitsVertically
}

/*
Method: In the player's sea, ships are yellow
*/
function mySeaColors() {
    if(this.state == "water"){
        return "mediumslateblue"
    }else if (this.state == "miss"){

        return "lightcoral"
    }else if (this.state == "hit"){
        return "palegreen"
    }else if (this.state == "ship"){
        return "silver"
    }
}

/*
Method: In the enemy sea, ships are blue (same as the sea)
*/

function enemySeaColors() {
    if(this.state == "water"){
        return "darkslateblue"
    }else if (this.state == "miss"){
        return "crimson"
    }else if (this.state == "hit"){
        return "seagreen"
    }else if (this.state == "ship"){
        return "midnightblue"
    }
}




// function checkShipHit(shipSize, context){
//     var hitCount = 0;
//     var context = myContext && enemyContext
//     var shipSize = shipsInfo.size;

//     for (var i = 0; i < context.length; i++) {
//         if (Context[i] === shipsInfo.name && Context[i].state === "hit") {
//             hitCount++;
//         }


//         if (hitCount === shipSize) {
//         console.log(shipsInfo.name + " has been sunk!");
//         shipsInfo.hits = hitCount;
//         return true;
//     }
// }
// return false;

// }



















document.getElementById("changePosition").onclick = function togglePosition(){
placingShipsHorizontally = !placingShipsHorizontally;
document.getElementById("changePosition").innerHTML = "Positie van je Schip: " + (placingShipsHorizontally ? "Horizontal" : "Vertical");
};




function isValidPosition(firstSquareIndex, currentShipSize){
    var isValid = true
    if( placingShipsHorizontally) {
        /* ships should not cross the border */
        var colNr = mySquares[firstSquareIndex].columnNr  
        var numAvailableSquares = numColumns - colNr
        if(numAvailableSquares < currentShipSize ){
            isValid = false
        }
        /* ships shouldn't overlap */
        for(var i = firstSquareIndex; i < firstSquareIndex + currentShipSize; i++) {
            if(mySquares[i] != undefined && mySquares[i].state == "ship") {
                isValid = false
            }
        }

    } else {
 /* Ships vertical border check */
        var rowNr = mySquares[firstSquareIndex].rowNr  
        var numAvailableSquares = numRows - rowNr
        if(numAvailableSquares < currentShipSize ){
            isValid = false
        }
               /* ships shouldn't overlap */
               for(var i = 0; i < currentShipSize; i++)  {
                var currentIndex = firstSquareIndex + (i * numColumns);
            if (mySquares[currentIndex] != undefined && mySquares[currentIndex].state == "ship") {
                isValid = false;
            }
        }
        console.log("testprintje voor vertical")
        /* TODO: make it work for when the ship will be placed vertically */
    }
    return isValid
}
/*
Place a ship, by changing the state of squares.
Starting on the firstSquareIndex but with a length depending on the length of the current ship.
*/
/*zelfde If loop als isValidPositon gebruikt voor function placeShip, checkt of horizontal false of true is*/

function placeShip(firstSquareIndex){
    var currentShipSize = shipsInfo[currentShipIndex].size;
    if(isValidPosition(firstSquareIndex, currentShipSize)){
        if (placingShipsHorizontally){

            
            for(var i = firstSquareIndex; i < firstSquareIndex + currentShipSize; i++) {
            mySquares[i].changeState("ship", myContext)
        }
    } else {

        for(var i = 0; i < currentShipSize; i++) {
            mySquares[firstSquareIndex + ( i * numColumns)].changeState("ship", myContext)

        }

    }
    
        currentShipIndex += 1
        showShipname();
        
    } 
    /* TODO: this function must also be able to place ships vertically */
}

function randomNumberForEnemyShip(shipSize, randomDirection) {
     numRows = 12       
     numColumns = numRows    

    if (randomDirection) {
        numColumns -= shipSize;
    } else {
        numRows -= shipSize;
    }

    var randomRow = Math.floor(Math.random() * (numRows + 1));
    var randomCol = Math.floor(Math.random() * (numColumns + 1));

    return (randomRow * numColumns) + randomCol;
}


function placeEnemyships() {
    var placedEnemyShips = 0;
    var currentEnemyShipIndex = 0;
    var numberofEnemyShips = shipsInfo.length;

    while (placedEnemyShips < numberofEnemyShips) {
        var currentShipSize = shipsInfo[currentEnemyShipIndex].size;
        var randomDirection = Math.random() < 0.5;
        var firstSquareIndex = randomNumberForEnemyShip(currentShipSize, randomDirection);


        if (isValidPosition(firstSquareIndex, currentShipSize, randomDirection)) {
            if (randomDirection) {
                for (var i = firstSquareIndex; i < firstSquareIndex + currentShipSize; i++) {
                    enemySquares[i].changeState("ship", enemyContext);
                }
            } else {


                for (var i = 0; i < currentShipSize; i++) {
                    enemySquares[firstSquareIndex + (i * numColumns)].changeState("ship", enemyContext);
                }
            }

            currentEnemyShipIndex += 1;
            placedEnemyShips += 1;
        } else {

        }
    }
        }

function playComputerTurn(){
    var targetIndex = Math.floor(Math.random() * numRows * numRows)
    if(mySquares[targetIndex].state == "water"){
        mySquares[targetIndex].changeState("miss",myContext)
    } else if (mySquares[targetIndex].state == "ship"){
        mySquares[targetIndex].changeState("hit",myContext)
    }
}


/*
Creates a data-structure for the player's sea, without any ships in it. 
Also draws each square after it's object has been added to the data-structure.

*/


function createMySea(){
    for (var rowNumber = 0; rowNumber < numRows; rowNumber++) {
        for (columnNumber = 0; columnNumber < numRows; columnNumber++) {
            var square = createFriendlyGridSquare(rowNumber, columnNumber)
            square.draw(myContext)
            mySquares.push(square)
        }
    }
}

/*
Creates the data-structure for the enemy sea, based on the pre-filled enemySquares array. 
Also inserts methods into the objects in that array.
And draws each square after it's object has been added to the data-structure.
*/
function createEnemySea(){
    for (var rowNumber = 0; rowNumber < numRows; rowNumber++) {
        for (columnNumber = 0; columnNumber < numRows; columnNumber++) {
            var square = createEnemyGridSquare(rowNumber, columnNumber)
            square.draw(enemyContext)
            enemySquares.push(square)
        }
    }
}

/*
Plays a turn human turn based on x and y coordinates (coming from a click).
*/








function playHumanTurn(mouseX,mouseY){
    for (var i = 0; i < enemySquares.length; i++) {
        if (enemySquares[i].isClicked(mouseX, mouseY)) {        
            
            if (enemySquares[i].state != "miss" && enemySquares[i].state != "hit"){
                if(enemySquares[i].state == "water"){
                    enemySquares[i].changeState("miss", enemyContext)
                    
            } else if(enemySquares[i].state == "ship"){
                enemySquares[i].changeState("hit", enemyContext)
                checkShipHit()
            }  playComputerTurn()
        }
            }
            

        } 
    }


/*
The computer throws a bomb at random at your sea.
*/
function playComputerTurn(){
    var targetIndex = Math.floor(Math.random() * numRows * numRows)
    if(mySquares[targetIndex].state == "water"){
        mySquares[targetIndex].changeState("miss",myContext)
    } else if (mySquares[targetIndex].state == "ship"){
        mySquares[targetIndex].changeState("hit",myContext)
    }
}




/*
The "clickEvent" parameter refers to the "click event" triggering this function. This event is an object containing all sorts of information concerning the click. Coordinates is one of those pieces of information.
The function attempts to place a ship.
If there are no more ships to be placed, the function draws the enemy sea and starts the game.
*/


function gameSetupRound(clickEvent) {
    mouseX = clickEvent.offsetX
    mouseY = clickEvent.offsetY

    /* Check to sea whether or not the click was on one of the squares */
    for (var i = 0; i < mySquares.length; i++) {
        if (mySquares[i].isClicked(mouseX, mouseY)) {
            placeShip(i)
            if(currentShipIndex == shipsInfo.length){
                createEnemySea()
                placeEnemyships()
                /* Change the onclick listeners to start the game. */
                document.getElementById("enemySea").onclick = playRound
                document.getElementById("mySea").onclick = ""
            }
        }
    }
}

/*
This is the actual game. Function is triggered with a clickEvent.
The clickEvent parameter is the click event containing the coordinates of the click.
*/


function playRound(clickEvent){
    mouseX = clickEvent.offsetX
    mouseY = clickEvent.offsetY
    playHumanTurn(mouseX,mouseY)
}

createMySea()
document.getElementById("mySea").onclick = gameSetupRound


</script>
</body>
</html>
